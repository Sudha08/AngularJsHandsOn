Angular JS
--------------------------------------------------------------

What is Angular Js?
---------------------
- MVC style javascript framework for creating single page apps
- Write our code in the way Angular JS wants us to, so we can use it's 
  features in our projects
- open source
- cross-browser compliant
--------------------------------------------------------------

Features:
---------------
- 2 way data binding
- templating
- DOM interaction
- filters
- directives
- many more...
--------------------------------------------------------------

Single Page Apps
------------------
- Angular JS primarily used to make single page, data driven applications
- Additonal content brought into the web page without the need to refresh
- Use 'Views' (the V in MVC) to achieve this
--------------------------------------------------------------

What will be covered?
----------------------
- MVC overview
- 2-way data binding
- filters, directives and expressions
- controllers and how to use them
- views and routing
- animations
- form validation
- create a to-do-list application
--------------------------------------------------------------

Prerequisites
---------------
- Javascript (essential)
- HTML (essential)
- CSS (optional)
- JSON (optional)
--------------------------------------------------------------

MVC Architecture
------------------

                        Application
                             |
                             |
                     -----------------    
                    |        |        |
                    |        |        |
                   ___      ___      ___
                  | M |    | V |    | C |
                  |___|    |___|    |___|

Model:
-------
- Think of model as data
- JSON, database data, etc.

View:
-------
- Used to display content & data to a user in a browser
- HTML
- Use expressions to insert data into views - <html tag> {{data}} </html tag>

controller:
------------
- control the functionality of our views
- performs the interaction between our models and our views
- different controllers for different areas in our application

Example:
---------
- User clicks a 'show users' button in a view
- The 'UserController' recognizes the button click event and performs a function
- The function communicate with the 'users' model and retrieves all the user data
- The controller passes accessibility to this data to the view, which then displays
  it to the end user via expressions
--------------------------------------------------------------

MVW - architecture used in AngularJs
--------------------------------------

- MVC - Model View Controller
- MVW - Model View Whatever   W - can be Controller/ VM - View Model (as in MVVM)
                                    / P - Presenter
        (MVW also called as MV*)
- Undelying principle - Separation of Concerns

https://stackoverflow.com/questions/13329485/what-does-mvw-stand-for
--------------------------------------------------------------

Download Angular.js
---------------------

https://angularjs.org -> download angular.min.js -> minified version & add it in the app
--------------------------------------------------------------

2 way data binding: 
---------------------

- refer 2waydatabinding.html
--------------------------------------------------------------

Directives:
------------

https://docs.angularjs.org/api/ng/directive/ngClassOdd 
--------------------------------------------------------------

Expressions:
-------------

- refer expressions.html

- ng-init - is the directive used to initialize our app with some data 
--------------------------------------------------------------

ng-repeat directive : 
----------------------

- refer ng-repeat.html
--------------------------------------------------------------

Angular Modules: 
--------------------

- refer app.js, index.html (ng-app = "myApp")

 var myApp = angular.module('myApp', []);
      |                       |           
      V                       V
    just a variable          name of the module - used in ng-app
    name. can be anything

    [] -> Array to store the dependencies (extra features for the app)

    - By doing this, the app is namespaced and won't be disturbed by any external scripts and variables
    - All the application code will reside in this module

    - To let Angular know that this module will be controlling the app, use it in the 'ng-app' directive
    - Module can be considered as the container for different components like controllers, config & run methods

--------------------------------------------------------------

Controllers:
-------------
- refer - sample.html, sampleController.js
- $scope - is a dependency
- In MVC, view - sample.html, controller - SampleController, model - data in $scope
--------------------------------------------------------------

Filters:
----------
- filters change the display of how we output data.
- order the data, format the data (date, currency, etc.), add some prefix
- orderBy: 'name' - orders in the ascending order & 
  orderBy: '-name' - orders in the descending order

  https://docs.angularjs.org/guide/filter
  https://docs.angularjs.org/api/ng/filter

  refer filters.html, filterController.js    
--------------------------------------------------------------

ng-include directive:
----------------------
- used to organize the files
- can bring html from another file and dump it into the current view
- break a complex html page into logical pieces
- avoid repetition of a html code block (create an external html file and use it in the 
                                         required places)
- eg: navigation bar (to be included in all the pages)

- <ng-include src="'header.html'"></ng-include> - valid usage but not recommended

refer - index.html, header.html
--------------------------------------------------------------

ng-show & ng-hide directives:
------------------------------
- used to show/hide any elements in the html page
- ng-show - directive to show based on a 'true/ false'
- ng-hide - directive to hide based on a 'true/ false'
- ng-show = true - will display everything / ng-show = false - will hide everything
- use negations like this - ng-show = !available (available = true/false)
- same goes for ng-hide

refer - index.html, app.js
--------------------------------------------------------------

ng-click directive:
--------------------
- allows to respond to click events on the elements

refer - index.html, app.js
--------------------------------------------------------------

ng-submit directive:
---------------------
- allows to handle form submits

refer - index.html, app.js
--------------------------------------------------------------

ng-src directive:
-------------------
- allows to load images dynamically
- webpage will be loaded properly using <img src> but will throw some
  error as image can't be dynamically loaded while loading the app
- on using ng-src angular intercepts the img src and displays the image

refer - index.html, app.js
--------------------------------------------------------------

Views & Routing:
-----------------
Views:
-------
- main feature for a single page application
- ng-view can be a tag directive or an attribute
- using this directive angular will know where to put the view
-----------------------
Routing:
---------
- download the module used for routing - https://code.angularjs.org/1.7.5 - angular-route.min.js
- add it in the project library
- use it as a dependency in the app - var myApp = angular.module('myApp', ['ngRoute']);
                                                                               |
                                                                               v
                                                              (name of the module) dependency used for routing
- "ngRoute" allows the usage of "$routeProvider" dependency
                                      |
                                      v
                                part of ngRoute module

refer index.html, directory.html, header.html, home.html, app.js
--------------------------------------------------------------

JSON & $http:
---------------
- use method to convert js to JSON - angular.toJson(data);

- https://jsonlint.com/ - to validate thr JSON data

- use the $http service to fetch the JSON file/data to be accessible from the controller
- service is a bit of code that handles some common operations

refer app.js, data/avengers.json
--------------------------------------------------------------

Custom Directives:
-------------------
- naming convention: myApp.directive('randomAvenger) has to be used as
                     <random-avenger> </random-avenger> in the template

- restrict : 'E' - element, 'A' - attribute, 'C' - classes , 'M' - comments
  E - directive can only be used as a html element
  A - directive can only be used as a html attribute
  C / M - are not used often
- can be used together - restrict: 'EA'

- scope : to bind the data from the directive to html and also binds the data from the controller 
          to the direcitve
          eg: $scope.avengers in AvengersController can be used inside the directive
- scope: {
            avengers: '=',
            title: '=',
            name: '='
        }
- <random-avenger avengers="avengers" title="'Random Avenger'"></random-avenger>
- The data present inside the scope will be assigned to the attributes in the directive element

- template: '<img ng-src="{{avengers[random].thumb}}">' - will also work
- templateUrl: specify the template to be loaded inplace of the directive

syntax:
--------

 myApp.directive('name', [function(dependencies) {
  return {
    restrict: 'E/A',
    scope: {
      data: '='
    },
    template/ templateUrl : template/URL,
    controller: {
      some operations - can be used within the directive & the template
    }
  };
}]);

refer - home.html, random.html, app.js
--------------------------------------------------------------
Transclude & Replace:
-----------------------
- Transclude:
  -----------
   - used to show the content inside the custom directive
   - In home.html,
    <random-avenger avengers="avengers" title="'Random Avenger'">
        <p>Checkout our random avenger</p> - normally this won't be shown in the html page
    </random-avenger>
  - In random.html,
    <div ng-transclude></div> - to tell angular where to place the custom directive content
  - In the custom directive definition,
    use transclude: true, to access the content inside the custom directive

    refer - home.html, random.html, app.js

- Replace:
 ----------
  - since asper html semantics, we can't have a tag like <random-avenger>, this property will help 
    in replacing the custom tag with the first element in the custom directive template
  - Eg: <random-avenger> will be replaced with a <div> tag from random.html since its the 
    first tag in the template

    refer - app.js, random.html
--------------------------------------------------------------

Animations:
------------
- using "ng-animate" for install animation effects
- download the module used for routing - https://code.angularjs.org/1.7.5 - angular-animate.min.js
- add it in the project library
- use it as a dependency in the app - var myApp = angular.module('myApp', ['ngAnimate']);
                                                                               |
                                                                               v
                                                              (name of the module) dependency used for routing
- refer - https://docs.angularjs.org/api/ngAnimate - for different animation CSS classes

        animation              animation
        start point            end point
         ___                    ___
        |   | ________________ |   |
        |___|                  |___|
        
        .ng-enter              .ng-enter
                              .ng-enter-active

- The same goes for "ng-leave" - used when we remove an item

- refer - style.css - Animation classes , app.js

Stagger effect:
----------------
 - effective when multiple items are added / removed

 - refer - app.js, directory.html, styles.css
--------------------------------------------------------------

Form validation:
----------------
- Form Classes:
  -------------
    - ng-pristine - when form/input not used yet
    - ng-dirty - when form/input has been used

    - ng-untouched - when input has not been touched
    - ng-touched - when input has been touched

    - ng-valid - when a form is valid
    - ng-invalid - when a form is not valid

- Form properties:
  -----------------
   For each form class, there is a corresponding property that takes a boolean value

  ---------------------------------
    CLASS        -   PROPERTY
  --------------------------------- 
   ng-pristine   -    $pristine
   ng-dirty      -    $dirty
   ng-untouched  -    $untouched
   ng-touched    -    $touched
   ng-valid      -    $valid
   ng-invalid    -    $invalid
  ------------------------------------

- refer - contact.html, app.js, styles.css
--------------------------------------------------------------

Location service:
-----------------
- To use the $location dependency
- refer - contact.html, contact-success.html, app.js - contactController
--------------------------------------------------------------

